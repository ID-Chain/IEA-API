swagger: '2.0'
info:
  description: |
    # IdentityChain Agent REST API
  title: 'IdentityChain API'
  x-logo:
    url: https://www.snet.tu-berlin.de/fileadmin/fg220/logos/Logo_IDChain.png
    backgroundColor: '#fefefe'
    altText: 'IdentityChain'
  version: '0.2.0'
schemes:
  - http
securityDefinitions:
  Bearer:
    description: |
      JWT Authorization header using the Bearer scheme.
      Example: 'Authorization: Bearer {token}'

      Please add Bearer in front of the JWT token:
      > Bearer xxxxx.yyyyy.zzzzz
    type: apiKey
    name: Authorization
    in: header
consumes:
  - application/json
produces:
  - application/json
security:
  - Bearer: []
tags:
  - name: common
    description: 'Common endpoints for issuer, verifier, and prover'
  - name: issuer
    description: 'Endpoints for an Issuer'
  - name: verifier
    description: 'Endpoints for a verifier'
  - name: prover
    description: 'Endpoints for a prover'
  - name: user
    description: 'User endpoints'
  - name: wallet
    description: 'Wallet endpoints'
  - name: connection
    description: 'Connection offer/request/response endpoints'
  - name: indyschema
    description: 'Low-level indy schema endpoints'
  - name: schema
    description: 'High-level schema endpoints'
  - name: credential
    description: 'Credential definition/offer/request endpoints'
  - name: proof
    description: 'Proof request, and proof endpoints'
  - name: transaction
    description: 'Low-level indy transaction endpoints'
  - name: message
    description: 'Message endpoints'

parameters:
  userParam:
    name: user
    in: path
    description: |-
      A unique id value identifying a user.
      "me" may be used as shorthand for the current user.
    type: string
    required: true
  walletParam:
    name: wallet
    in: path
    description: |-
      A unique id value identifying a wallet.
      "default" may be used as shorthand for the current user's default wallet.
    type: string
    required: true
  walletHeader:
    name: wallet
    in: header
    description: A unique id value identifying a wallet.
    type: string
  theirDidParam:
    name: theirDid
    in: path
    description: 'Their pairwise connection did'
    type: string
    required: true
  credentialParam:
    name: credential
    in: path
    description: 'A unique id value identifying a credential'
    type: string
    required: true
  credentialMessageParam:
    name: credentialMessage
    in: path
    description: 'A unique id value identifying a sent/issued credential message'
    type: string
    required: true

definitions:
  walletId:
    description: '(Optional) A unique id value identifying a wallet'
    type: string
  id:
    description: 'A uniquely identifying string value'
    type: string
  createdAt:
    description: 'Creation Time'
    type: string
  updatedAt:
    description: 'Last update time'
    type: string
  messageId:
    description: 'Sent message id, could be a nonce depending on message format'
    type: string
  messageType:
    description: 'Message Type'
    type: string
    enum:
      - 'urn:sovrin:agent:message_type:sovrin.org/connection_offer'
      - 'urn:sovrin:agent:message_type:sovrin.org/connection_request'
      - 'urn:sovrin:agent:message_type:sovrin.org/connection_response'
      - 'urn:sovrin:agent:message_type:sovrin.org/connection_acknowledge'
      - 'urn:sovrin:agent:message_type:sovrin.org/credential_offer'
      - 'urn:sovrin:agent:message_type:sovrin.org/credential_request'
      - 'urn:sovrin:agent:message_type:sovrin.org/credential'
      - 'urn:sovrin:agent:message_type:sovrin.org/proof_request'
      - 'urn:sovrin:agent:message_type:sovrin.org/proof'
  senderDid:
    description: 'Sender Did'
    type: string
  recipientDid:
    description: 'Recipient Did'
    type: string
  expireAt:
    description: 'Optional expire time'
    type: string
  user:
    type: object
    properties:
      id:
        description: 'A unique string value identifying a user'
        type: string
      username:
        description: 'Username'
        type: string
      wallet:
        description: "Id of user's current default wallet"
        type: string
  wallet:
    type: object
    properties:
      id:
        description: 'A unique string value identifying a wallet'
        type: string
      createdAt:
        description: 'wallet creation time'
        type: string
      updatedAt:
        description: 'wallet update time'
        type: string
      owner:
        description: 'Wallet Owner User Id'
        type: string
      users:
        description: 'Array of user Ids which are allowed to use this wallet'
        type: array
        items:
          type: string
      credentials:
        type: object
        properties:
          key:
            description: 'Wallet Key'
            type: string
      ownDid:
        description: 'Wallet primary did'
        type: string
  user_post:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      wallet:
        $ref: '#/definitions/wallet_post'
    required:
      - username
      - password
  user_put:
    type: object
    properties:
      username:
        description: '(Optional) New username'
        type: string
      password:
        description: '(Optional) New password'
        type: string
      wallet:
        $ref: '#/definitions/walletId'
  wallet_post:
    type: object
    properties:
      name:
        description: '(Optional) Wallet name, must be globally unique. Automatically generated if none is provided.'
        type: string
      credentials:
        description:
          'Wallet Credentials JSON. Supported keys vary by wallet type. A default config will be used if none is provided.'
        type: object
        properties:
          key:
            description: 'Passphrase used to derive wallet master key'
            type: string
        required:
          - key
      seed:
        description: '(Optional) Seed to use for initial did creation.'
        type: string
    required:
      - credentials
  credential_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      credentialRequestId:
        description: 'Credential Request _id as stored in API'
        type: string
      values:
        description:
          'Object containing attributes defined in schema as key-value pairs (e.g. {"attrName":"attrValue", "attrName1":"attrValue1"})'
        type: object
    required:
      - credentialRequestId
      - values
  credentialdef_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      schemaId:
        description: 'A unique string value identifying a schema'
        type: string
      tag:
        description: 'A string value identifying credential definition uniquely within given schema'
        type: string
        default: 'TAG1'
      supportRevocation:
        description: '(Optional) States if revocation should be supported for this credential definiton'
        type: boolean
    required:
      - schemaId
  credentialoffer_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      recipientDid:
        description: 'DID for whom to create a credential offer'
        type: string
      credDefId:
        description: 'Credential definition id'
        type: string
      credentialLocation:
        description:
          '(Optional) URL at which key-value object containing credential values can be fetched using HTTP GET'
        type: string
    required:
      - recipientDid
      - credDefId
  credentialrequest_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      credentialOfferId:
        description: 'credentialoffer _id as stored in API'
        type: string
    required:
      - credentialOfferId
  connectionoffer_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      endpoint:
        description: '(Optional) Response endpoint for connection response - my endpoint'
        type: string
      role:
        description: '(Optional) Role offered to the connection invitee'
        type: string
        enum:
          - NONE
          - TRUSTEE
          - STEWARD
          - TRUST_ANCHOR
      meta:
        description:
          '(Optional) Additional data to store in the offer (and later in the pairwise), e.g. citizen id but not send with the offer'
        type: object
      data:
        description: '(Optional) Additional data like name, logo, description, to send with the connection offer'
        type: object
  connectionrequest_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      endpoint:
        description: '(Optional) Response endpoint for connection response - my endpoint'
        type: string
      theirDid:
        description: '(Optional) Their (endpoint) did, required if there is no connection offer'
        type: string
      theirVk:
        description:
          '(Optional) Their (endpoint) did verification key, required if there is no connection offer or verkey not on ledger.'
        type: string
      theirEndpoint:
        description:
          '(Optional) Their endpoint address, required if no there is no connection offer or address not on ledger.'
        type: string
      connectionOffer:
        description: '(Optional) A connection offer object'
        type: object
        example:
          id: 09348295728957894752397589247589247589
          type: 'urn:sovrin:agent:message_type:sovrin.org/connection_offer'
          message:
            did: endpointDid
            verkey: endpointVk
            endpoint: endpointAddress
            nonce: 09348295728957894752397589247589247589
  connectionresponse_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      connectionRequestId:
        description: 'A unique string value identifying the connection request to respond to'
        type: string
        example: '5b7ddce00000000000000000'
    required:
      - connectionRequestId
  proofrequest_template_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      template:
        description: 'proof request template (optionally with mustache placeholders)'
        type: string
        example:
          '{ "name": "Ticket", "version": "0.1", "requested_attributes": { "attr1_referent": { "name": "firstname", "restrictions": [ { "cred_def_id": "{{ cred_def_id }}" }] }, "attr2_referent": { "name": "phone" } }, "requested_predicates": {} }'
    required:
      - template
  proofrequest_template_put:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/wallet'
      template:
        description: 'proof request template (optionally with mustache placeholders)'
        type: string
        example:
          '{ "name": "Ticket", "version": "0.1", "requested_attributes": { "attr1_referent": { "name": "firstname", "restrictions": [ { "cred_def_id": "{{ cred_def_id }}" }] }, "attr2_referent": { "name": "phone" } }, "requested_predicates": {} }'
    required:
      - template
  proofrequest_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      recipientDid:
        description: 'DID for whom to create a proof request'
        type: string
      proofRequest:
        description:
          'proof request template _id or proof request object (see https://github.com/hyperledger/indy-sdk/blob/master/doc/getting-started/getting-started.md#apply-for-a-job)'
        # technically this is not supported by OAS 2 but ajv should handle this anyway since it is supported by json-schema
        oneOf:
          - type: string
          - type: object
        example: '507f191e810c19729de860ea'
      templateValues:
        description: 'values to use for rendering the proof request template as key-value object'
        type: object
        example:
          cred_def_id: 'VPKnyQy9yo4oy344YtAUcb:3:CL:485'
          age: 18
          citizen: true
    required:
      - recipientDid
      - proofRequest
  proof_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      proofRequestId:
        description: 'proof request _id'
        type: string
      values:
        description: (Optional) Object containing self-attested-attributes as key-value pairs
        type: object
        example:
          phone: '00001111'
    required:
      - proofRequestId
  indyschema_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      name:
        description: 'A unique name of the schema'
        type: string
      version:
        description: 'version for schema'
        type: string
      attrNames:
        description: 'list of attribute names put into the schema'
        type: array
        items:
          type: string
    required:
      - name
      - version
      - attrNames
  schema_post:
    type: object
    required:
      - attributes
      - name
      - version
    properties:
      name:
        type: string
        description: 'A unique name for the schema'
      version:
        type: string
        description: 'Schema version'
      parentSchemaId:
        type: string
        description: 'Schema Id of the parent'
      createCredentialDefinition:
        type: boolean
        default: true
      isRevocable:
        type: boolean
        description:
          'Flag to define if credentials issued with this schema could be revoked. If true it will generate one or multiple Revocation Registries.'
        default: false
      attributes:
        type: array
        description: 'List of attribute names put into the schema'
        items:
          required:
            - name
            - type
          properties:
            name:
              type: string
              description: 'Name of the attribute (Key)'
            type:
              type: string
              description: 'A valid type for attributes, as requested using GET /types in schema compiler API'
    example:
      name: 'Passport'
      version: '1.0'
      isRevocable: false
      parentSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:ID_NL:2.0'
      attributes:
        - name: 'Given Name'
          type: string
  schema_details:
    allOf:
      - $ref: '#/definitions/schema_post'
      - type: object
        properties:
          isDeprecated:
            type: boolean
          lowLevelSchema:
            type: object
            properties: {}
          credentialDefinitionId:
            type: string
          revocationRegistryId:
            type: string
        example:
          isDeprecated: false
          lowLevelSchema: {}
          credentialDefinitionId: 'Th7MpTaRZVRYnPiabds81Y:3:CL:15:TAG1'
          revocationRegistryId: ''
  message_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      did:
        description: 'Recipient DID'
        type: string
      message:
        description: 'authcrypted, base64-encoded message to send'
        type: string
    required:
      - did
      - message
  indy_post:
    type: object
    properties:
      message:
        description: 'Anoncrypted-message'
        type: string
    required:
      - message
  login_post:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
  nym_post:
    type: object
    properties:
      wallet:
        $ref: '#/definitions/walletId'
      did:
        description: 'Did to write on the ledger'
        type: string
      verkey:
        description: 'Verkey of did to write on the ledger'
        type: string
      alias:
        description: '(Optional) Alias of did to write on the ledger'
        type: string
      role:
        description: '(Optional) role of did to write on the ledger (default = NONE)'
        type: string
        enum:
          - NONE
          - TRUSTEE
          - STEWARD
          - TRUST_ANCHOR
    required:
      - did
      - verkey
  error_message:
    type: object
    properties:
      message:
        description: 'Informational Message'
        type: string
  connection_offer:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/connection_offer'
        type: string
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        $ref: '#/message_formats/connection_offer'
      meta:
        description: 'Additional Metadata'
        type: object
        properties:
          role:
            description: '(Optional) Role which is offered'
            type: string
          myDid:
            description: "Sender's pairwise did (for reference purposes)"
            type: string
  connection_request:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/connection_request'
        type: string
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        $ref: '#/message_formats/connection_request'
      meta:
        description: 'Additional Metadata'
        type: object
        properties:
          role:
            description: '(Optional) Role which was offered (only on offering side)'
            type: string
          myDid:
            description: "User's pairwise did"
            type: string
          theirEndpointDid:
            description: "(Only on sender side) Recipient's endpoint did"
            type: string
          theirEndpointVk:
            description: "(Only on sender side) Recipient's endpoint did verification key"
            type: string
          theirEndpoint:
            description: "(Only on sender side) Recipient's endpoint address"
            type: string
  connection_response:
    $ref: '#/message_formats/connection_response'
  credential_offer:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/credential_offer'
        type: string
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        $ref: '#/message_formats/credential_offer'
      meta:
        description: 'Additional Metadata'
        type: object
        properties:
          credentialLocation:
            description: '(Optional) URL location of credential values to automatically issue credentials on request'
            type: string
  indy_schema_db:
    description: 'Indy low-level schema as stored in DB'
    type: object
    properties:
      name:
        description: 'Schema Name'
        type: string
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      attrNames:
        type: array
        items:
          description: 'Schema attribute name'
          type: string
      version:
        description: 'Schema Version'
        type: string
      wallet:
        description: 'Owner Wallet Id'
        type: string
      schemaId:
        description: 'Schema Id'
        type: string
      data:
        $ref: '#/definitions/indy_schema'
  indy_schema:
    description: 'Schema as created by indy-sdk and stored on the ledger'
    type: object
    properties:
      id:
        description: 'Schema Id'
        type: string
      attrNames:
        type: array
        items:
          description: 'Schema attribute name'
          type: string
      name:
        description: 'Schema Name'
        type: string
      version:
        description: 'Schema Version'
        type: string
      ver:
        description: 'Schema JSON Version'
        type: string
  credential_definition:
    type: object
    properties:
      created:
        $ref: '#/definitions/createdAt'
      credDefId:
        description: 'Credential Definition Id'
        type: string
      revocRegId:
        description: '(Optional) Revocation Registry Id'
        type: string
      revocRegType:
        description: '(Optional) Revocation Registry Type'
        type: string
      wallet:
        description: 'Owner Wallet id'
        type: string
      data:
        $ref: '#/definitions/indy_credential_definition'
  indy_credential_definition:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      schemaId:
        description: 'Schema Id'
        type: string
      type:
        description: 'Credential Definition Type'
        type: string
      tag:
        description: 'Credential Definition Tag'
        type: string
      value:
        type: object
        properties:
          primary:
            description: 'Primary Credential Public Key'
            type: string
          revocation:
            description: '(Optional) Revocation Credential Public Key'
            type: string
      ver:
        description: 'Credential Definition Version'
        type: string
  indy_credential:
    description: 'Credential as created by indy-sdk, fields may vary'
    type: object
    properties:
      referent:
        description: 'Credential Id as stored in wallet'
        type: string
      schema_id:
        description: 'Schema Id'
        type: string
      cred_def_id:
        description: 'Credential Definition Id'
        type: string
      rev_reg_def_id:
        description: '(Optional) Revocation Registry Definition Id, if revocable'
        type: string
      values:
        description: 'Credential Values'
        type: object
      signature:
        description: 'Signature'
        type: string
      signature_correctness_proof:
        description: 'Signature Correctness Proof'
        type: string
  credential_request:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/credential_request'
        type: string
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        $ref: '#/message_formats/credential_request'
      meta:
        description: 'Credential request metadata JSON as created by indy-sdk'
        type: object
  credential_message:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/credential'
        type: string
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        $ref: '#/message_formats/credential'
      meta:
        description: 'Additional Metadata'
        type: object
        properties:
          revocRegId:
            description: '(Optional) Revocation Registry Id'
            type: string
          credRevocId:
            description: '(Optional) Credential Revocation Id'
            type: string
          revocRegDelta:
            description: '(Optional) Revocation Registry Delta'
            type: string
  proofrequest_message:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/proof_request'
        type: string
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        $ref: '#/message_formats/proof_request'
      meta:
        description: 'Additional Metadata'
        type: object
        properties:
          proofId:
            description: 'Proof placeholder Id which can be queried for proof status'
            type: string
  proof_message:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/proof'
        type: string
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        $ref: '#/message_formats/proof'
  proof:
    type: object
    properties:
      wallet:
        description: 'Recipient wallet Id'
        type: string
      did:
        description: 'Proof Sender/Prover Pairwise Did'
        type: string
      proof:
        description: 'Proof as created by indy-sdk and sent by prover'
        type: object
      status:
        description: 'Proof status (pending or received)'
        type: string
        enum:
          - pending
          - received
      meta:
        description: 'Additional Metadata'
        type: object
        properties:
          proofRequest:
            description: 'Proof request object, necessary for further processing'
            type: object
      isValid:
        description: 'Whether proof is valid or not'
        type: boolean
  pairwise:
    type: object
    properties:
      myDid:
        description: 'My pairwise DID'
        type: string
      theirDid:
        description: 'Their pairwise DID'
        type: string
      metadata:
        description: 'Additional Metadata, may include other things'
        type: object
        properties:
          theirEndpointDid:
            description: 'Their endpoint did'
            type: string
          theirEndpointVk:
            description: 'Their endpoint did verification key'
            type: string
          theirEndpoint:
            description: 'Their endpoint address'
            type: string
          acknowledged:
            description: 'Whether this connection was acknowledged'
            type: boolean
  proofrequest_template:
    type: object
    properties:
      wallet:
        description: 'Owner wallet Id'
        type: string
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      template:
        description: 'Proof request mustachejs template string'
        type: string
  indy_transaction:
    description: 'Indy Transaction as retrieved from ledger'
    type: object
    example:
      txn:
        data:
          role: '2'
          verkey: '~7TYfekw4GUagBnBVCqPjiC'
          dest: Th7MpTaRZVRYnPiabds81Y
        type: '1'
        metadata:
          from: V4SGRU86Z58d6TV7PBUe6f
      ver: '1'
      rootHash: D47RQhSxcBgWB1oBZwFeKom3Fvi343NTfpAdKb6uNLuw
      txnMetadata:
        seqNo: 2
      reqSignature: {}
      auditPath:
        - JBMXqyYxQrtkq9AJjHueEiAtpGiNzVYXkgWqHkZo5zUi
  indy_nym_result:
    description: 'Indy NYM Result'
    type: object
    example:
      ver: '1'
      auditPath:
        - EsY4hbw8MPXuyQTiq43pvwJqak6pGzfKwJKMXoi6uYS7
        - DNHM372JZJoGcxdHdmsj3QSSiomyeZux6ssJXxAJqyvd
      txnMetadata:
        seqNo: 11
        txnId: add157fff4d23744df58af490dfd10b7bdf7783b8de6cf4c8b0ab99bee43ab19
        txnTime: 1542895203
      rootHash: 7tHdWdQ8YQsDtBEN7e72kykgNqpBg8w8WtpHESZqM7te
      txn:
        metadata:
          digest: 9d5187f1075b17a625b2878c09823080a55c46db662fc798d46c5bae567859e9
          from: Th7MpTaRZVRYnPiabds81Y
          reqId: 1542895203354360000
        type: '1'
        data:
          role: '101'
          alias: Government
          verkey: Efr5B7iJn2t9jEZRtne6bSpFWUMJBBHhJzVoqAurFQv2
          dest: S5g1z6eUGjdTF6uiuvoJDC
        protocolVersion: 2
      reqSignature:
        type: ED25519
        values:
          - value: 39vDSiQPeH9265BvPkaryDqr8C8ipzhj4iwGerGgr32KxmhjeSaPZXDRUAkrZsfzcNgHYkditwVyNfcTBYEPV1e1
            from: Th7MpTaRZVRYnPiabds81Y
  indy_nym:
    description: 'Indy NYM transaction'
    type: object
    example:
      type: '105'
      state_proof:
        proof_nodes:
          '+QHp+LOgPdFX//TSN0TfWK9JDf0Qt733eDuN5s9Miwq5m+5Dqxm4kPiOuIx7ImlkZW50aWZpZXIiOiJUaDdNcFRhUlpWUlluUGlhYmRzODFZIiwicm9sZSI6IjEwMSIsInNlcU5vIjoxMSwidHhuVGltZSI6MTU0Mjg5NTIwMywidmVya2V5IjoiRWZyNUI3aUpuMnQ5akVaUnRuZTZiU3BGV1VNSkJCSGhKelZvcUF1ckZRdjIiffkBMaDT0j9uCbFabO0LnyutnB5uDC61QaWLtVTJU4XCa4sWo4CAoJqauj70Qf++s0g43b1zvnQEyQJh2lfNqxFRtmaADvkwgKACG8f0w2NsuDibWYibc1TYySAgUKSeIevHF6wVZdMBL6BEAIIJs0un9jVqVEABbCWTkc0rybTVrFgaKU6LD6ciGYCAgKBjZtlPSrjbP4QJFMmYYGWdMN8am6ylwGmeWrYLq3scS6AkcibehQ5iUOtCXD3lQORF05za0YiwT2DavXYCOkmJQoCgfSVcTjtW1SUW/CcILmuBjzvybpOl4RlMkgp3hJTFe2qgG9KhOW51cPReSFM+bhjF8JwB0JqIO+TMzzDo7i/n97WgOzoZfFEvyKcPZvdFjW/+5+SwMc2p8UporYwQiM0hnBqA'
        root_hash: 8sVQPW4KMVyqFoMyPhwZ4L5CbiDiN4qdG3J2wNq1ktzJ
        multi_signature:
          signature:
            R3pHQoLzAYgXAK4awmCCG5LeV4oqDPqk5zf2xp7j236wJu3obMVK4pxed9n8GUyPTB4ntehvWZpd7SNod9PyhHz6JZxJhtstWemPncSFXYAZwHkFsnP3ZVWs4MTthAgj528SpRUcnFA5sWAypj1SaFiKGb9mu2gA2cHJvcjcXe5oAF
          participants:
            - Node2
            - Node4
            - Node3
          value:
            txn_root_hash: 7tHdWdQ8YQsDtBEN7e72kykgNqpBg8w8WtpHESZqM7te
            pool_state_root_hash: FEEmzwdmT4VzvqHKDH3VVxgJgxwSVTN7yS9vYJe5LV64
            state_root_hash: 8sVQPW4KMVyqFoMyPhwZ4L5CbiDiN4qdG3J2wNq1ktzJ
            timestamp: 1542895203
            ledger_id: 1
      data:
        dest: S5g1z6eUGjdTF6uiuvoJDC
        identifier: Th7MpTaRZVRYnPiabds81Y
        role: '101'
        seqNo: 11
        txnTime: 1542895203
        verkey: Efr5B7iJn2t9jEZRtne6bSpFWUMJBBHhJzVoqAurFQv2
      identifier: Th7MpTaRZVRYnPiabds81Y
      seqNo: 11
      reqId: 1542895352021723000
      dest: S5g1z6eUGjdTF6uiuvoJDC
      txnTime: 1542895203
  message_db:
    description: 'Message Object as stored in DB'
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      createdAt:
        $ref: '#/definitions/createdAt'
      updatedAt:
        $ref: '#/definitions/updatedAt'
      expireAt:
        $ref: '#/definitions/expireAt'
      messageId:
        $ref: '#/definitions/messageId'
      type:
        $ref: '#/definitions/messageType'
      senderDid:
        $ref: '#/definitions/senderDid'
      recipientDid:
        $ref: '#/definitions/recipientDid'
      message:
        description: 'Message which is sent to recipient, see message_formats'
        type: object
      meta:
        description: 'Additional Metadata'
        type: object

responses:
  accepted:
    description: 'Message accepted'
  no_content:
    description: 'Success - but no content'
  bad_request:
    description: 'Bad Request'
    schema:
      $ref: '#/definitions/error_message'
  not_found:
    description: 'Not Found'
    schema:
      $ref: '#/definitions/error_message'
  unauthorized:
    description: 'Unauthorized'

message_formats:
  connection_offer:
    type: object
    properties:
      id:
        description: 'Offer Nonce'
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/connection_offer'
        type: string
      message:
        type: object
        properties:
          did:
            description: "Sender's Endpoint DID"
            type: string
          verkey:
            description: "(Optional) Sender's Endpoint DID Verification Key, required if not on ledger"
            type: string
          endpoint:
            description: "(Optional) Sender's Endpoint DID endpoint Address, required if not on ledger"
            type: string
          nonce:
            description: 'Offer Nonce'
            type: string
          data:
            description: 'Object containing additional information about sender such as name, description, logo, etc.'
            type: object
  connection_request:
    type: object
    properites:
      id:
        description: 'offer nonce, if applicable, or request nonce'
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/connection_request'
        type: string
      message:
        type: object
        properties:
          did:
            description: "Sender's Pairwise DID"
            type: string
          verkey:
            description: "(Optional) Sender's Pairwise DID Verification Key, required if not on ledger"
            type: string
          endpointDid:
            description: "(Optional) Sender's Endpoint DID, required if not on ledger not diddoc has no endpoint"
            type: string
          endpoint:
            description: "(Optional) Sender's Endpoint DID endpoint Address, required if not on ledger"
            type: string
          nonce:
            description: 'Request Nonce'
            type: string
  connection_response:
    type: object
    properites:
      id:
        description: 'request nonce'
        type: string
      aud:
        description: "Recipient's pairwise did"
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/connection_response'
        type: string
      message:
        type: object
        properties:
          did:
            description: "Sender's Pairwise DID"
            type: string
          verkey:
            description: "(Optional) Sender's Pairwise DID Verification Key, required if not on ledger"
            type: string
          nonce:
            description: 'Request Nonce'
            type: string
  connection_acknowledgement:
    type: object
    properites:
      id:
        description: "Sender's Pairwise DID"
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/connection_acknowledge'
        type: string
      message:
        description: 'SUCCESS'
        type: string
  credential_offer:
    type: object
    properites:
      id:
        description: 'offer nonce'
        type: string
      origin:
        description: "Sender's pairwise did"
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/credential_offer'
        type: string
      message:
        description: 'Credential Offer as created by indy-sdk, fields may vary'
        type: object
        properties:
          schema_id:
            description: "Offered credential's schema id"
            type: string
          cred_def_id:
            description: "Offered credential's credentialdefinition id"
            type: string
          nonce:
            description: 'Offer Nonce'
            type: string
          key_correctness_proof:
            description: 'Key Correctness Proof'
            type: string
  credential_request:
    type: object
    properites:
      id:
        description: 'offer nonce'
        type: string
      origin:
        description: "Sender's pairwise did"
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/credential_request'
        type: string
      message:
        description: 'Credential Request as created by indy-sdk, fields may vary'
        type: object
        properties:
          prover_did:
            description: 'Prover Did'
            type: string
          cred_def_id:
            description: 'Credential Definition Id'
            type: string
          blinded_ms:
            description: 'Blinded Master Secret'
            type: string
          blinded_ms_correctness_proof:
            description: 'Blinded Master Secret Correctness Proof'
            type: string
          nonce:
            description: 'Request Nonce'
            type: string
  credential:
    type: object
    properites:
      id:
        description: 'request nonce'
        type: string
      origin:
        description: "Sender's pairwise did"
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/credential'
        type: string
      message:
        $ref: '#/definitions/indy_credential'
  proof_request:
    type: object
    properties:
      id:
        description: 'Request Nonce'
        type: string
      origin:
        description: "Sender's pairwise did"
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/proof_request'
        type: string
      message:
        type: object
        properties:
          name:
            description: 'Proof Request name'
            type: string
          version:
            description: 'Proof Request Version'
            type: string
          nonce:
            description: 'Request Nonce'
            type: string
          requested_attributes:
            type: object
            properties:
              attr1_referent:
                description: 'Attribute Id/Referent'
                type: object
                properties:
                  name:
                    description: 'Attribute Name'
                    type: string
                  restrictions:
                    description: |-
                      (Optional) Attribute Restrictions, e.g. which credential definition it is backed by.
                      Leave empty to allow for self-attested attributes.
                    type: array
                    items:
                      type: object
                      properties:
                        cred_def_id:
                          description: 'Credential Definition Id'
                          type: string
          requested_predicates:
            type: object
            properties:
              predicate1_referent:
                type: object
                properties:
                  name:
                    description: 'Predicate Name'
                    type: string
                  p_type:
                    description: 'Predicate Type, e.g. ">="'
                    type: string
                  p_value:
                    description: 'Value to check predicate against'
                    type: string
                  restrictions:
                    description: |-
                      (Optional) Attribute Restrictions, e.g. which credential definition it is backed by.
                      Leave empty to allow for self-attested attributes.
                    type: array
                    items:
                      type: object
                      properties:
                        cred_def_id:
                          description: 'Credential Definition Id'
                          type: string
  proof:
    type: object
    properties:
      id:
        description: 'Request Nonce'
        type: string
      origin:
        description: "Sender's pairwise did"
        type: string
      type:
        description: 'urn:sovrin:agent:message_type:sovrin.org/proof'
        type: string
      message:
        description: 'Proof as created by indy-sdk'
        type: object

paths:
  /api/login:
    post:
      summary: 'Allow users to login, will return them a JWT valid for a specific amount of time'
      description: 'Allow users to login, will return them a JWT valid for a specific amount of time'
      security: []
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/login_post'
      responses:
        '200':
          description: 'Login successful'
          schema:
            type: object
            properties:
              token:
                description: 'Bearer Token'
                type: string
        '400':
          $ref: '#/responses/bad_request'
        '401':
          description: 'Login failed'
          schema:
            type: object
            properties:
              error:
                description: 'Error message'
                type: string
      tags:
        - user
        - common
        - issuer
        - verifier
        - prover
      x-code-samples:
        - lang: JSON
          label: Issuer
          source: |
            {
              "username": "issuer",
              "password": "dummy"
            }

  /api/user:
    post:
      summary: 'Register a new user'
      description: 'Register a new user'
      security: []
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/user_post'
      responses:
        '201':
          description: 'User successfully created'
          headers:
            Location:
              description: 'Path to created user, e.g. /user/userId'
              type: string
          schema:
            type: object
            properties:
              id:
                description: 'A unique string value identifying a user'
                type: string
        '400':
          $ref: '#/responses/bad_request'
      tags:
        - user
        - common
        - issuer
        - verifier
        - prover
      x-code-samples:
        - lang: JSON
          label: New User
          source: |
            {
              "username": "testuser",
              "password": "securepassword"
            }

  /api/user/{user}:
    parameters:
      - $ref: '#/parameters/userParam'
    get:
      summary: 'Retrieve a user'
      description: 'Retrieve a user'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/user'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - user
        - common
        - issuer
        - verifier
        - prover
    put:
      summary: 'Update a User (at least one of the properties must be provided)'
      description: 'Update a User (at least one of the properties must be provided)'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/user_put'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/user'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - user
        - common
        - issuer
        - verifier
        - prover
      x-code-samples:
        - lang: JSON
          label: New Username
          source: |
            {
              "username": "testuser"
            }
        - lang: JSON
          label: New Password
          source: |
            {
              "password": "somenewpassword"
            }
        - lang: JSON
          label: wallet
          source: |
            {
              "wallet": "<new-wallet-id>"
            }
    delete:
      summary: 'Delete a User'
      description: 'Delete a User'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - user
        - common
        - issuer
        - verifier
        - prover

  /api/wallet:
    get:
      summary: 'List all wallets of user'
      description: 'List all wallets of user'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/wallet'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - wallet
        - common
        - issuer
        - verifier
        - prover
    post:
      summary: 'Create a new Wallet (optionally with given name and settings)'
      description: 'Create a new Wallet (optionally with given name and settings)'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/wallet_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/wallet'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - wallet
        - common
        - issuer
        - verifier
        - prover
      x-code-samples:
        - lang: JSON
          label: Use Defaults
          source: |
            {
              "credentials": { }
            }
        - lang: JSON
          label: Provide values
          source: |
            {
              "name": "9c79f5e8-acec-451f-9eb9-49fc6ee02b11",
              "credentials": { },
              "seed": "my-wallet-seed"
            }

  /api/wallet/{wallet}:
    parameters:
      - $ref: '#/parameters/walletParam'
    get:
      summary: 'Retrieve a Wallet'
      description: 'Retrieve a Wallet'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/wallet'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - wallet
        - common
        - issuer
        - verifier
        - prover
    delete:
      summary: 'Delete a Wallet'
      description: 'Delete a Wallet'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - wallet
        - common
        - issuer
        - verifier
        - prover

  /api/wallet/{wallet}/connection/:
    parameters:
      - $ref: '#/parameters/walletParam'
    get:
      summary: 'List connections/pairwises stored in wallet'
      description: 'List connections/pairwises stored in wallet'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/pairwise'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - wallet
        - common
        - issuer
        - verifier
        - prover

  /api/wallet/{wallet}/connection/{theirDid}:
    parameters:
      - $ref: '#/parameters/walletParam'
      - $ref: '#/parameters/theirDidParam'
    get:
      summary: 'Retrieve connection/pairwise stored in wallet'
      description: 'Retrieve connection/pairwise stored in wallet'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/pairwise'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - wallet
        - common
        - issuer
        - verifier
        - prover

  /api/wallet/{wallet}/credential/:
    get:
      summary: 'List credentials stored in wallet'
      description: 'List credentials stored in wallet'
      parameters:
        - $ref: '#/parameters/walletParam'
        - in: query
          name: schema_id
          type: string
          description: '(Optional) schema_id to filter credentials'
        - in: query
          name: schema_issuer_did
          type: string
          description: '(Optional) schema_issuer_did to filter credentials'
        - in: query
          name: schema_name
          type: string
          description: '(Optional) schema_name to filter credentials'
        - in: query
          name: schema_version
          type: string
          description: '(Optional) schema_version to filter credentials'
        - in: query
          name: issuer_did
          type: string
          description: '(Optional) issuer_did to filter credentials'
        - in: query
          name: cred_def_id
          type: string
          description: '(Optional) cred_def_id to filter credentials'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/indy_credential'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - wallet
        - prover

  /api/wallet/{wallet}/credential/{credential}:
    parameters:
      - $ref: '#/parameters/walletParam'
      - $ref: '#/parameters/credentialParam'
    get:
      summary: 'Retrieve credential stored in wallet'
      description: 'Retrieve credential stored in wallet'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/indy_credential'
      tags:
        - wallet
        - prover

  /api/connection/{myDid}:
    parameters:
      - name: myDid
        in: path
        description: 'A unique did used in a pairwise'
        type: string
        required: true
    get:
      summary: 'Retrieve a (pending) connection'
      description: 'Retrieve a (pending) connection'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              myDid:
                type: string
                description: 'my pairwise did for this connection'
              theirDid:
                type: string
                description: 'their pairwise did for this connection'
              acknowledged:
                type: boolean
                description: 'boolean value indicating if connection is acknowledged'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - issuer
        - verifier

  /api/connectionoffer:
    get:
      summary: 'List all my connection offers'
      description: 'List all my connection offers'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/connection_offer'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - issuer
        - verifier
    post:
      summary: 'Create a new connection offer'
      description: 'Create a new connection offer'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/connectionoffer_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/connection_offer'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - issuer
        - verifier
      x-code-samples:
        - lang: JSON
          label: Defaults
          source: |
            { }
        - lang: JSON
          label: With Wallet and endpoint
          source: |
            {
              "wallet": "c8fd81fb-b8b5-43fb-96f5-051b8b827480",
              "endpoint": "<did-endpoint>"
            }
        - lang: JSON
          label: Offer Invitee Role
          source: |
            {
              "wallet": "c8fd81fb-b8b5-43fb-96f5-051b8b827480",
              "endpoint": "<did-endpoint>",
              "role": "TRUSTEE",
            }

  /api/connectionoffer/{connectionOfferId}:
    parameters:
      - $ref: '#/parameters/walletHeader'
      - in: path
        name: connectionOfferId
        description: connection offer _id
        type: string
        required: true
    get:
      summary: 'Retrieve a connection offer by _id'
      description: 'Retrieve a connection offer by _id'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/connection_offer'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - common
        - issuer
        - verifier
        - prover
    delete:
      summary: 'Delete a connection offer by _id'
      description: 'Delete a connection offer by _id'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - common
        - issuer
        - verifier
        - prover

  /api/connectionrequest:
    get:
      summary: 'List all my connection requests'
      description: 'List all my connection requests'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/connection_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - common
        - issuer
        - verifier
        - prover
    post:
      summary: 'Accept a connection offer and/or send a connection request'
      description: 'Accept a connection offer and/or send a connection request'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/connectionrequest_post'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/connection_request'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - common
        - issuer
        - verifier
        - prover
      x-code-samples:
        - lang: JSON
          label: Accept Connection Offer
          source: |
            // All fields are optional
            { }
        - lang: JSON
          label: Send Connection Offer
          source: |
            {
              "connectionOffer": {
                "id": "c8fd81fb-b8b5-43fb-96f5-051b8b827480",
                "type": "urn:sovrin:agent:message_type:sovrin.org/connection_offer",
                "message": {
                  "did": "endpointDid",     // Required only if endpoint not stored in ledger
                  "verkey": "endpointVk",   // Required if Endpoint DID not stored on Ledger or has no diddoc
                  "endpoint": "endpointAddress",
                  "nonce": "09348295728957894752397589247589247589",
                  "data": { }
                }
              }
            }

  /api/connectionrequest/{connectionRequestId}:
    parameters:
      - in: path
        name: connectionRequestId
        description: 'connection request _id'
        type: string
        required: true
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a connection request by _id'
      description: 'Retrieve a connection request by _id'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/connection_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - common
        - issuer
        - verifier
        - prover
    delete:
      summary: 'Delete a connection request by _id'
      description: 'Delete a connection request by _id'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - common
        - issuer
        - verifier
        - prover

  /api/connectionresponse:
    post:
      summary: 'Accept a connection request and send a connection response'
      description: 'Accept a connection request and send a connection response'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/connectionresponse_post'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/connection_response'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - connection
        - common
        - issuer
        - verifier
        - prover
      x-code-samples:
        - lang: JSON
          label: Accept Connection
          source: |
            {
              "connectionId": "5b7ddce00000000000000000"
            }
        - lang: JSON
          label: Accept Connection With Wallet ID
          source: |
            {
              "wallet": "3149c5c3-fccb-484f-a709-4cba84702b21",
              "connectionId": "5b7ddce00000000000000000"
            }

  /api/indyschema:
    get:
      summary: 'List low-level indy schemas'
      description: 'List low-level indy schemas'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/indy_schema_db'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - indyschema
        - issuer
    post:
      summary: 'Create a low-level indy schema'
      description: 'Create a low-level indy schema'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/indyschema_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/indy_schema_db'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - indyschema
        - issuer
      x-code-samples:
        - lang: JSON
          label: Sample
          source: |
            {
              "name": "my-custom-schema",
              "version": "0.1",
              "attrNames": [ "name", "age", "phone" ]
            }

  /api/indyschema/{schemaid}:
    parameters:
      - description: 'A unique string value identifying this schema.'
        in: path
        name: schemaid
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a low-level indy schema'
      description: 'Retrieve a low-level indy schema'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/indy_schema'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - indyschema
        - issuer
        - verifier

  /api/schema:
    get:
      tags:
        - schema
        - issuer
      summary: 'List schemas'
      description: 'List schemas from the logged in user'
      parameters:
        - name: onlyActive
          in: query
          description: '(Optional) Flag to filter all non-active schemas'
          required: false
          type: boolean
        - $ref: '#/parameters/walletHeader'
      responses:
        200:
          description: ''
          schema:
            type: array
            example:
              - name: 'Passport'
                version: '1.0'
                createdAt: '2018-10-21T18:27:23.759Z'
                schemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Passport:1.0'
              - name: 'ID_NL'
                version: '2.0'
                createdAt: '2018-09-21T18:27:23.759Z'
                schemaId: 'Th7MpTaRZVRYnPiabds81Y:2:ID_NL:2.0'
              - name: 'Passport'
                version: '2.0'
                createdAt: '2018-08-21T18:27:23.759Z'
                schemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Passport:2.0'
            items:
              properties:
                name:
                  type: 'string'
                  description: 'Name of the schema'
                version:
                  type: 'string'
                  description: 'Version of the schema'
                schemaId:
                  type: 'string'
                  description: 'Schema Id (as defined in Indy)'
                createdDate:
                  type: 'number'
                  description: 'Creation Date of the schema (EPOCH)'
    post:
      tags:
        - schema
        - issuer
      summary: 'Create a Schema'
      description: 'Create a Schema, Credential Definition & Revocation Registry (if revocable) for the logged in user'
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/schema_post'
        - $ref: '#/parameters/walletHeader'

      responses:
        201:
          description: ''
        400:
          description: 'Schema does not pass the schema compiler/typechecker'
        409:
          description: 'Schema with the same name and version already exists'

  /api/schema/{schemaid}:
    get:
      tags:
        - schema
        - issuer
        - verifier
      summary: 'Retrieve a schema'
      description: 'Retrieve a schema'
      parameters:
        - name: schemaid
          in: path
          description: 'A unique string value identifying this schema.'
          required: true
          type: string
        - $ref: '#/parameters/walletHeader'
      responses:
        200:
          description: 'Schema Details'
          schema:
            $ref: '#/definitions/schema_details'
        404:
          description: 'Schema with that ID not found in database'

    patch:
      tags:
        - schema
        - issuer
      summary: 'Alter schema by the given operation'
      description: 'Alter schema by the given operation'
      parameters:
        - $ref: '#/parameters/walletHeader'
        - name: schemaid
          in: path
          description: 'A unique string value identifying this schema.'
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: 'object'
            required:
              - 'operation'
            properties:
              operation:
                type: 'string'
                enum:
                  - 'revoke'
      responses:
        204:
          description: 'Successfully altered schema'
        422:
          description: 'Schema does not support revocations, or is already revoked'

  /api/attribute/type:
    get:
      summary: 'The types supported by the high-level schema language'
      description: 'The types supported by the high-level schema language'
      responses:
        200:
          description: 'All the names of the supported types by the schema-compiler'
          schema:
            type: array
            items:
              type: string
      tags:
        - schema
        - issuer

  /api/credentialdef:
    get:
      summary: 'List credential definitions of wallet stored in DB'
      description: 'List credential definitions of wallet stored in DB'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/credential_definition'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
    post:
      summary: 'Create a credential definition'
      description: 'Create a credential definition'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/credentialdef_post'
      responses:
        '201':
          description: 'Created'
          schema:
            type: object
            properties:
              credDefId:
                description: 'A unique string value identifying a credential definition'
                type: string
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
      x-code-samples:
        - lang: JSON
          label: Basic Definition
          source: |
            {
              "schemaId": "Th7MpTaRZVRYnPiabds81Y:2:ID_NL:2.0"
            }
        - lang: JSON
          label: With Tag & Revocation
          source: |
            {
              "schemaId": "Th7MpTaRZVRYnPiabds81Y:2:ID_NL:2.0",
              "tag": "Company_Registration",
              "supportRevocation": "true"
            }

  /api/credentialdef/{creddef}:
    parameters:
      - description: A unique string value identifying a credential definition.
        in: path
        name: creddef
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a credential definition from the ledger'
      description: 'Retrieve a credential definition from the ledger'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/indy_credential_definition'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer

  /api/credentialoffer:
    get:
      summary: 'List credential offers'
      description: 'List credential offers'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/credential_offer'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
        - prover
    post:
      summary: 'Create and send a credential offer'
      description: 'Create and send a credential offer'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/credentialoffer_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/credential_offer'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
      x-code-samples:
        - lang: JSON
          label: Basic Request
          source: |
            {
              "recipientDid": "did:example:123456789abcdefghi",
              "credDefId": "Th7MpTaRZVRYnPiabds81Y:2:ID_NL:2.0"
            }
        - lang: JSON
          label: With Credential Location
          source: |
            {
              "recipientDid": "did:example:123456789abcdefghi",
              "credDefId": "Th7MpTaRZVRYnPiabds81Y:2:ID_NL:2.0",
              "credentialLocation": "https://www.example.com/creds-kv-pair/mycreds"
            }

  /api/credentialoffer/{id}:
    parameters:
      - description: 'A unique string value identifying a credential offer.'
        in: path
        name: id
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a credential offer'
      description: 'Retrieve a credential offer'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/credential_offer'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
        - prover
    delete:
      summary: 'Delete a credential offer'
      description: 'Delete a credential offer'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
        - prover

  /api/credentialrequest:
    get:
      summary: 'List credential requests'
      description: 'List credential requests'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/credential_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
        - prover
    post:
      summary: 'Accept credential offer and create credential request'
      description: 'Accept credential offer and create credential request'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/credentialrequest_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/credential_request'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
      x-code-samples:
        - lang: JSON
          label: Basic Request
          source: |
            {
              "credentialOfferId": "12518093odsfjods125"
            }

  /api/credentialrequest/{id}:
    parameters:
      - description: 'A unique string value identifying a credential request.'
        in: path
        name: id
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a credential request'
      description: 'Retrieve a credential request'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/credential_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
        - prover
    delete:
      summary: 'Delete a credential request'
      description: 'Delete a credential request'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
        - prover

  /api/credential/:
    get:
      summary: 'List credentials issued by a wallet'
      description: 'List credentials issued by a wallet'
      parameters:
        - $ref: '#/parameters/walletHeader'
        - in: query
          name: recipientDid
          type: string
          description: '(Optional) recipientDid to filter by'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/credential_message'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
    post:
      summary: 'Issue/Create a credential and send to recipient'
      description: 'Issue/Create a credential and send to recipient'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/credential_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/credential_message'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer
      x-code-samples:
        - lang: JSON
          label: Basic Request
          source: |
            {
              "credentialRequestId": "12518093odsfjods125",
              "values": {
                "age": 19,
                "name": "John"
              }
            }

  /api/credential/{id}:
    parameters:
      - description: 'A unique string value identifying this credential.'
        in: path
        name: id
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a credential message issued/sent by a wallet'
      description: 'Retrieve a credential message issued/sent by a wallet'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/credential_message'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer

  # Endpoint is WIP
  /api/credential/{id}/revoke:
    parameters:
      - description: 'A unique string value identifying this credential.'
        in: path
        name: id
        required: true
        type: string
    post:
      summary: 'Revoke a credential'
      description: 'Revoke a credential'
      parameters:
        - in: body
          name: data
          schema:
            type: object
            properties:
              wallet:
                $ref: '#/definitions/walletId'
      responses:
        '200':
          description: 'Success'
        '204':
          $ref: '#/responses/no_content'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - credential
        - issuer

  /api/proofrequesttemplate:
    get:
      summary: 'List proof request templates'
      description: 'List proof request templates'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/proofrequest_template'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
    post:
      summary: 'Create a proof request templates'
      description: 'Create a proof request templates'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/proofrequest_template_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/proofrequest_template'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
      x-code-samples:
        - lang: JSON
          label: Sample Ticket
          source: |
            // Note that we can insert mustache placeholders
            {
              "template": {
                "name": "Ticket",
                "version": "0.1",
                "requested_attributes": {
                  "referent": {
                    "name": "firstname",
                    "restrictions": [{ "cred_def_id": "{{ cred_def_id }}" }]
                  },
                  "attr2_referent": { "name": "phone" }
                }
              }
            }

  /api/proofrequesttemplate/{id}:
    parameters:
      - description: 'A unique string value identifying a proof request template.'
        in: path
        name: id
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a proof request template'
      description: 'Retrieve a proof request template'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/proofrequest_template'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
    put:
      summary: 'Update a proof request template'
      description: 'Update a proof request template'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/proofrequest_template_put'
      responses:
        '200':
          description: ''
        '404':
          description: 'Proof request template Id not found'
      tags:
        - proof
        - verifier
      x-code-samples:
        - lang: JSON
          label: Sample Ticket
          source: |
            // Note that we can insert mustache placeholders
            {
              "template": {
                "name": "Ticket",
                "version": "0.1",
                "requested_attributes": {
                  "referent": {
                    "name": "firstname",
                    "restrictions": [{ "cred_def_id": "{{ cred_def_id }}" }]
                  },
                  "attr2_referent": { "name": "phone" }
                }
              }
            }
    delete:
      summary: 'Delete a proof request template'
      description: 'Delete a proof request template'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier

  /api/proofrequest:
    get:
      summary: 'List proof requests'
      description: 'List proof requests'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/proofrequest_message'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
        - prover
    post:
      summary: 'Create and send a proof request'
      description: 'Create and send a proof request'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/proofrequest_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/proofrequest_message'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
      x-code-samples:
        - lang: JSON
          label: Without Template Values
          source: |
            {
              "recipientDid": "did:example:123456789abcdefghi",
              "proofRequest": "507f191e810c19729de860ea",
            }
        - lang: JSON
          label: With Template Values
          source: |
            {
              "recipientDid": "did:example:123456789abcdefghi",
              "proofRequest": "507f191e810c19729de860ea",
              "templateValues": {
                "cred_def_id": "VPKnyQy9yo4oy344YtAUcb:3:CL:485",
                "age": 18,
                "citizen": true
              }
            }

  /api/proofrequest/{id}:
    parameters:
      - description: 'A unique string value identifying a proof request.'
        in: path
        name: id
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a proof request'
      description: 'Retrieve a proof request'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/proofrequest_message'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
        - prover
    delete:
      summary: 'Delete a proof request'
      description: 'Delete a proof request'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
        - prover

  /api/proof:
    get:
      summary: 'List received proofs'
      description: 'List received proofs'
      parameters:
        - $ref: '#/parameters/walletHeader'
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/proof'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
    post:
      summary: 'Create and send a Proof'
      description: 'Create and send a Proof'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/proof_post'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/proof_message'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - prover
      x-code-samples:
        - lang: JSON
          label: Without Values
          source: |
            {
              "proofRequestId": "23581013dsfd15"
            }
        - lang: JSON
          label: With Values
          source: |
            {
              "proofRequestId": "23581013dsfd15",
              "values": {
                "age": 19
              }
            }

  /api/proof/{id}:
    parameters:
      - description: 'A unique string value identifying a proof.'
        in: path
        name: id
        required: true
        type: string
      - $ref: '#/parameters/walletHeader'
    get:
      summary: 'Retrieve a received proof (including whether it is valid)'
      description: 'Retrieve a received proof (including whether it is valid)'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/proof'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier
    delete:
      summary: 'Delete a received proof'
      description: 'Delete a received proof'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - verifier

  /api/transactions:
    get:
      description: 'Get ledger transactions from-to indexes'
      parameters:
        - $ref: '#/parameters/walletHeader'
        - in: query
          name: from
          type: number
          description: 'Sequence Number of first transaction to query (greater than 0)'
          required: true
        - in: query
          name: to
          type: number
          description: 'Sequence Number of last transaction to query (greater than from index)'
          required: true
        - in: query
          name: type
          type: string
          description: 'Ledger Type: pool, domain, config. By default is DOMAIN'
      responses:
        '200':
          description: 'Returns list of transactions'
          schema:
            type: array
            items:
              $ref: '#/definitions/indy_transaction'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - transaction

  /api/nym:
    post:
      description: 'Send Nym request to the ledger'
      summary: 'Send Nym request to the ledger'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/nym_post'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/indy_nym_result'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - transaction
      x-code-samples:
        - lang: JSON
          label: Basic Request
          source: |
            {
              "did": "did:example:123456789abcdefghi",
              "verkey": "125dsfa2a3135d"
            }

  /api/nym/{did}:
    get:
      description: 'Retrieve Nym from ledger'
      summary: 'Retrieve Nym from ledger'
      parameters:
        - $ref: '#/parameters/walletHeader'
        - in: path
          name: did
          description: 'Did of NYM record to retrieve'
          type: string
          required: true
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/indy_nym'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - transaction

  /indy/:
    post:
      summary: 'Agent Message Endpoint'
      description: 'Agent Message Endpoint'
      security: []
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/indy_post'
      responses:
        '202':
          description: 'Accepted'
        '400':
          $ref: '#/responses/bad_request'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - message
      x-code-samples:
        - lang: JSON
          label: Sample Request
          source: |
            {
              "message": "aGVsbG8gd29ybGQK"
            }

  /api/message/:
    get:
      summary: 'List messages'
      description: 'List messages'
      parameters:
        - $ref: '#/parameters/walletHeader'
        - in: query
          name: type
          description: '(Optional) A single message type to filter by'
          type: string
      responses:
        '200':
          description: 'Success'
          schema:
            type: array
            items:
              $ref: '#/definitions/message_db'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - message
    post:
      summary: 'Send message'
      description: 'Send message'
      parameters:
        - in: body
          name: data
          schema:
            $ref: '#/definitions/message_post'
      responses:
        '200':
          description: 'Success'
          schema:
            description: 'Response'
            type: object
        '202':
          description: 'Accepted'
        '400':
          $ref: '#/responses/bad_request'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - message
      x-code-samples:
        - lang: JSON
          label: Sample Request
          source: |
            {
              "did": "did:example:123456789abcdefghi",
              "message": "aGVsbG8gd29ybGQK"
            }

  /api/message/{messageId}:
    parameters:
      - $ref: '#/parameters/walletHeader'
      - in: path
        name: messageId
        description: 'A unique string value identifying a message.'
        required: true
        type: string
    get:
      summary: 'Retrieve a message'
      description: 'Retrieve a message'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/message_db'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - message
    delete:
      summary: 'Delete a message'
      description: 'Delete a message'
      responses:
        '204':
          $ref: '#/responses/no_content'
        '401':
          $ref: '#/responses/unauthorized'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - message

  /tails/{revocRegDefId}:
    parameters:
      - in: path
        name: revocRegDefId
        description: 'unique id of revocation registry'
        required: true
        type: string
    get:
      summary: 'Agent Revocation Tails Endpoint'
      description: 'Public immutable shared blob linked to given revocation registry definition'
      security: []
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/responses/bad_request'
        '404':
          $ref: '#/responses/not_found'
      tags:
        - proof
        - issuer
        - prover
